/**
 * @fileoverview Firestore Security Rules for Pixel Vault application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and associated data (psychological and academic predictions).
 * Administrative access is required for managing institutions and tutor requests.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /institutions/{institutionId}: Stores institution data, writable only by administrators.
 * - /independentTutorGroups/{groupId}: Stores independent tutor group data, writable only by administrators.
 * - /tutorRequests/{requestId}: Stores tutor requests, writable only by administrators.
 * - /psychological_predictions/{userId}: Stores psychological prediction data, accessible only to the user themselves.
 * - /academic_prediction/{userId}: Stores academic prediction data, accessible only to the user themselves.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by the absence of a top-level `list` rule on `/users`.
 * - Write operations on `/institutions`, `/independentTutorGroups`, and `/tutorRequests` require administrator privileges (not yet implemented in this prototype).
 * - The default security posture for any ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - If the authenticated user's ID does not match the userId.
     * @deny (get, update, delete) - If the authenticated user's ID does not match the userId or if the document does not exist on update/delete.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to institution documents.
     * @path /institutions/{institutionId}
     * @allow (get, list) - Public read access for all institutions.
     * @deny (create, update, delete) - Only admins can create, update or delete institutions.
     * @principle Restricts write access to institutions to authorized admins.
     */
    match /institutions/{institutionId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin check
      allow update: if false; // TODO: Add admin check and existing document check
      allow delete: if false; // TODO: Add admin check and existing document check
    }

    /**
     * @description Controls access to independent tutor group documents.
     * @path /independentTutorGroups/{groupId}
     * @allow (get, list) - Public read access for all tutor groups.
     * @deny (create, update, delete) - Only admins can create, update, or delete tutor groups.
     * @principle Restricts write access to tutor groups to authorized admins.
     */
    match /independentTutorGroups/{groupId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin check
      allow update: if false; // TODO: Add admin check and existing document check
      allow delete: if false; // TODO: Add admin check and existing document check
    }

    /**
     * @description Controls access to tutor request documents.
     * @path /tutorRequests/{requestId}
     * @allow (get, list) - Public read access for all tutor requests.
     * @deny (create, update, delete) - Only admins can create, update, or delete tutor requests.
     * @principle Restricts write access to tutor requests to authorized admins.
     */
    match /tutorRequests/{requestId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin check
      allow update: if false; // TODO: Add admin check and existing document check
      allow delete: if false; // TODO: Add admin check and existing document check
    }

        /**
     * @description Controls access to psychological prediction documents.
     * @path /psychological_predictions/{userId}
     * @allow (create) - Authenticated user creates their own prediction.
     * @allow (get, update, delete) - Authenticated user accesses their own prediction.
     * @deny (create) - If the authenticated user's ID does not match the userId.
     * @deny (get, update, delete) - If the authenticated user's ID does not match the userId or if the document does not exist on update/delete.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /psychological_predictions/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to academic prediction documents.
     * @path /academic_prediction/{userId}
     * @allow (create) - Authenticated user creates their own prediction.
     * @allow (get, update, delete) - Authenticated user accesses their own prediction.
     * @deny (create) - If the authenticated user's ID does not match the userId.
     * @deny (get, update, delete) - If the authenticated user's ID does not match the userId or if the document does not exist on update/delete.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /academic_prediction/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
    }
  }
}