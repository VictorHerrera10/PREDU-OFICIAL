rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data.  Only the authenticated user can
     *              read or write their own profile.
     * @path /users/{userId}/profile
     * @allow (create) User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) User 'user_abc' can read their profile if request.auth.uid == 'user_abc'.
     * @allow (update) User 'user_abc' can update their profile if request.auth.uid == 'user_abc'.
     * @allow (delete) User 'user_abc' can delete their profile if request.auth.uid == 'user_abc' and the profile exists.
     * @deny (create) User 'user_xyz' cannot create profile for 'user_abc' if request.auth.uid != 'user_abc'.
     * @deny (get) User 'user_xyz' cannot read profile for 'user_abc' if request.auth.uid != 'user_abc'.
     * @deny (update) User 'user_xyz' cannot update profile for 'user_abc' if request.auth.uid != 'user_abc'.
     * @deny (delete) User 'user_xyz' cannot delete profile for 'user_abc' if request.auth.uid != 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/profile {
      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the user profile.
     * @param {string} userId The user ID from the path.
     * @return {bool} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}