{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile in the Pixel Vault application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username for the Pixel Vault application."
        },
        "firstName": {
          "type": "string",
          "description": "The user's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The user's last name."
        },
        "dni": {
          "type": "string",
          "description": "The user's national identity document number."
        },
        "age": {
          "type": "number",
          "description": "The user's age."
        },
        "grade": {
          "type": "string",
          "description": "The user's current grade or academic level."
        },
        "city": {
          "type": "string",
          "description": "The city where the user lives."
        },
        "phone": {
          "type": "string",
          "description": "The user's phone number."
        },
        "profilePictureUrl": {
          "type": "string",
          "description": "URL for the user's profile picture."
        },
        "isProfileComplete": {
          "type": "boolean",
          "description": "Flag to indicate if the user has completed their profile setup."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "creationDate": {
          "type": "string",
          "description": "The date and time when the user profile was created.",
          "format": "date-time"
        },
        "lastLogin": {
          "type": "string",
          "description": "The date and time of the user's last login.",
          "format": "date-time"
        },
        "role": {
          "type": "string",
          "description": "The role of the user within the application.",
          "enum": ["student", "tutor", "admin"]
        },
        "institutionId": {
          "type": "string",
          "description": "The ID of the institution the user is associated with (if any)."
        },
        "tutorDetails": {
          "type": "object",
          "description": "Additional details for users with the 'tutor' role.",
          "properties": {
            "roleInInstitution": {
              "type": "string",
              "description": "The tutor's specific role within the institution (e.g., Psic√≥logo, Docente)."
            }
          }
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "creationDate"
      ]
    },
    "Institution": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Institution",
      "type": "object",
      "description": "Represents an educational institution or college with detailed information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Institution entity."
        },
        "name": {
          "type": "string",
          "description": "The official name of the institution."
        },
        "address": {
          "type": "string",
          "description": "The physical address of the institution."
        },
        "contactEmail": {
          "type": "string",
          "description": "A general contact email for the institution.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "The date and time when the institution was added.",
          "format": "date-time"
        },
        "region": {
            "type": "string",
            "description": "The geographical region of the institution."
        },
        "level": {
            "type": "string",
            "description": "The educational level of the institution (e.g., Primary, Secondary, Higher Education)."
        },
        "studentLimit": {
            "type": "number",
            "description": "The maximum number of students that can be registered for this institution."
        },
        "tutorLimit": {
            "type": "number",
            "description": "The maximum number of tutors that can be registered for this institution."
        },
        "directorName": {
            "type": "string",
            "description": "The full name of the institution's director."
        },
        "directorEmail": {
            "type": "string",
            "description": "The contact email for the director.",
            "format": "email"
        },
        "directorPhone": {
            "type": "string",
            "description": "The contact phone number for the director."
        },
        "teachingModality": {
            "type": "string",
            "description": "The teaching modality (e.g., In-person, Virtual, Hybrid)."
        },
        "logoUrl": {
            "type": "string",
            "description": "URL of the institution's logo.",
            "format": "uri"
        },
        "uniqueCode": {
            "type": "string",
            "description": "A unique code generated for the institution."
        }
      },
      "required": [
        "id",
        "name",
        "address",
        "contactEmail",
        "region",
        "level",
        "studentLimit",
        "tutorLimit",
        "directorName",
        "directorEmail",
        "teachingModality",
        "uniqueCode"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Access is restricted to the user with the matching userId. Path-based ownership ensures authorization independence: `request.auth.uid == userId`.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to their Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/institutions/{institutionId}",
        "definition": {
          "entityName": "Institution",
          "schema": {
            "$ref": "#/backend/entities/Institution"
          },
          "description": "Stores information about educational institutions. Should only be writable by administrators.",
          "params": [
            {
              "name": "institutionId",
              "description": "The unique identifier for the institution."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure secure user authentication and profile management for the Pixel Vault application. The core principle is Authorization Independence, achieved through denormalization where necessary, though in this simplified scenario, it primarily relies on path-based ownership. The structure supports straightforward security rules and efficient data retrieval.\n\n- User Profiles: User profiles are stored in `/users/{userId}` using path-based ownership. This provides simple security rules based on `request.auth.uid == userId`. This approach provides Authorization Independence since access control depends only on the path and the authenticated user's ID.\n- Institutions: A collection to manage educational institutions. Access control should be strict, likely limited to admin users for write operations.\n\nThis structure supports the required QAPs (Rules are not Filters) because list operations can be securely implemented at the `/users` collection group level based on user ID."
  }
}
