/**
 * @fileoverview Firestore Security Rules for Pixel Vault application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only the authenticated user can access and modify their own profile data.
 *
 * Data Structure:
 * User profile data is stored under the `/users/{userId}/profile` path, where `{userId}` corresponds to the Firebase Auth UID.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Path-based ownership (`request.auth.uid == userId`) is the primary mechanism for authorization.
 * - The rules validate the `id` field on `create` operations to enforce path consistency.
 * - The rules enforce immutability of the `id` field on `update` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures access to user profile documents.
     * @path /users/{userId}/profile
     * @allow (create) - Authenticated user with UID 'user123' can create their profile if request.resource.data.id == 'user123'.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can read/update/delete their profile at /users/user123/profile.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a profile under /users/user123/profile.
     * @deny (get, update, delete) - Authenticated user with UID 'user456' cannot read/update/delete the profile at /users/user123/profile.
     * @principle Enforces document ownership for writes and reads, validates relational integrity, and ensures authorization independence.
     */
    match /users/{userId}/profile {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the document and it exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read permissions
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write permissions
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}