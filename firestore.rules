/**
 * @fileoverview Firestore Security Rules for Pixel Vault application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and psychological predictions,
 * ensuring that only the authenticated user can access their own data. Institutions and Tutor Requests are
 * secured with the assumption that they should only be writable by administrators.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase Auth UID.
 * - /institutions/{institutionId}: Stores data about educational institutions.
 * - /independentTutorGroups/{groupId}: Stores data about independent tutor groups.
 * - /tutorRequests/{requestId}: Stores tutor requests.
 * - /psychological_predictions/{userId}: Stores user's RIASEC test data.
 * - /academic_prediction/{userId}: Stores user's academic prediction data.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is generally disallowed except where explicitly noted (e.g., for specific collections).
 * - The rules default to a secure-by-default posture, explicitly denying access unless specifically allowed.
 *
 * Denormalization for Authorization:
 *  - Path-based ownership is used for `/users/{userId}` and `/psychological_predictions/{userId}`, where the `userId` in the path MUST match `request.auth.uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if the UID in the request matches the `userId` in the path.
     * @deny (create, update, get, delete) if the UID does not match.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for institutions. Only admins can create, read, update, and delete institutions.
     * @path /institutions/{institutionId}
     * @allow (create, update, get, delete) if the request comes from an admin.
     * @deny (create, update, get, delete) if the request does not come from an admin.
     * @principle Restricts access to admin roles.
     */
    match /institutions/{institutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation
      allow update: if false; // TODO: Add admin validation
      allow delete: if false; // TODO: Add admin validation
    }

     /**
      * @description Enforces access control for independent tutor groups. Only admins can create, read, update, and delete tutor groups.
      * @path /independentTutorGroups/{groupId}
      * @allow (create, update, get, delete) if the request comes from an admin.
      * @deny (create, update, get, delete) if the request does not come from an admin.
      * @principle Restricts access to admin roles.
      */
    match /independentTutorGroups/{groupId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add admin validation
        allow update: if false; // TODO: Add admin validation
        allow delete: if false; // TODO: Add admin validation
    }

    /**
     * @description Enforces access control for tutor requests. Only admins can create, read, update, and delete tutor requests.
     * @path /tutorRequests/{requestId}
     * @allow (create, update, get, delete) if the request comes from an admin.
     * @deny (create, update, get, delete) if the request does not come from an admin.
     * @principle Restricts access to admin roles.
     */
    match /tutorRequests/{requestId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add admin validation
        allow update: if false; // TODO: Add admin validation
        allow delete: if false; // TODO: Add admin validation
    }

    /**
     * @description Enforces access control for psychological predictions. Only the authenticated user can read/write their own predictions.
     * @path /psychological_predictions/{userId}
     * @allow (create, update, get, delete) if the UID in the request matches the `userId` in the path.
     * @deny (create, update, get, delete) if the UID does not match.
     * @principle Enforces document ownership for writes.
     */
    match /psychological_predictions/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for academic predictions. Only the authenticated user can read/write their own predictions.
     * @path /academic_prediction/{userId}
     * @allow (create, update, get, delete) if the UID in the request matches the `userId` in the path.
     * @deny (create, update, get, delete) if the UID does not match.
     */
    match /academic_prediction/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}